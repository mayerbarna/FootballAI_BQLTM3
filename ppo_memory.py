class Memory:
    def __init__(self):
        self.states = []
        self.actions = []
        self.action_probabilities = []
        self.actions_onehot = []
        self.values = []  # generated by the critic model
        self.masks = []  # used to check if the game is completed
        self.rewards = []

    def store_in_memory(self, state, action, action_prob, action_onehot, q_value, mask, reward):
        self.states.append(state)
        self.actions.append(action)
        self.actions_onehot.append(action_onehot)
        self.action_probabilities.append(action_prob)
        self.values.append(q_value)
        self.masks.append(mask)
        self.rewards.append(reward)

    def add_q_value(self, q_value):
        self.values.append(q_value)

    def get_batch_size(self):
        return len(self.rewards)

    def clear(self):
        self.states = []
        self.actions = []
        self.action_probabilities = []
        self.actions_onehot = []
        self.values = []
        self.masks = []
        self.rewards = []
